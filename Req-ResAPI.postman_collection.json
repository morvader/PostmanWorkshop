{
	"info": {
		"_postman_id": "95b909d4-cc23-4cba-9976-cddab9b68203",
		"name": "Req-Res API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Cookies and Schema",
			"item": [
				{
					"name": "Cookies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "122fa0e0-a60b-425d-9eb6-fa5d97c98e18",
								"exec": [
									"//check if the cookie exists",
									"pm.expect(pm.cookies.has('__cfduid')).to.be.true;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f92749a7-92f8-496f-8e01-690b45df92cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "SchemaValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42d09192-f1fc-4769-bf66-a62f8901924f",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"var schema ={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"data\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"first_name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"last_name\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"avatar\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"email\",",
									"        \"first_name\",",
									"        \"last_name\",",
									"        \"avatar\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"data\"",
									"  ]",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PreRequest",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "PreRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e75114a4-5e7b-4b99-a74b-7b440fa0bf5d",
								"exec": [
									"let baseURL = pm.environment.get(\"url\");",
									"",
									"pm.sendRequest(baseURL + \"/users/1\", function (err, response) {",
									"    const resp = response.json();",
									"    pm.environment.set(\"first_email\", resp.data.email);",
									"    console.log(resp);",
									"});",
									"",
									"var options = {",
									"  'method': 'POST',",
									"  'url': 'https://reqres.in/api/login',",
									"  'header': {",
									"    'Content-Type': 'application/json'",
									"  },",
									"  'body': JSON.stringify({\"email\":\"eve.holt@reqres.in\",\"password\":\"cityslicka\"})",
									"",
									"};",
									"pm.sendRequest(options, function (error, response) { ",
									"  if (error) throw new Error(error);",
									"  console.log(response.json());",
									"  pm.environment.set(\"token\", response.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3eae539-e1b2-45f8-8025-6f40d31f00dc",
								"exec": [
									"let firstEmail = pm.environment.get(\"first_email\");",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].email).to.eql(firstEmail);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GetUser1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa3a9244-5e1a-4114-a5ca-bbcf258be97f",
						"exec": [
							"//Check status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Check ContentType header is present",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//Check reposnse time",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"//Read response",
							"const jsonData = pm.response.json();",
							"",
							"//Debuggind. Data is shown at console",
							"console.log(jsonData.data.email);",
							"",
							"pm.test(\"Check user email\", function () {",
							"    pm.expect(jsonData.data.email).to.eql(\"george.bluth@reqres.in\");",
							"});",
							"",
							"pm.test(\"Check property\", function () {",
							"    pm.expect(jsonData.data).to.have.property('email');",
							"});",
							"    ",
							"pm.test(\"Check if object contains all provided keys\", function () {",
							"    pm.expect(jsonData.data).to.have.all.keys('id','email','first_name', 'last_name', 'avatar');",
							"    pm.expect(jsonData.data).to.not.have.any.keys('age');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "afb15d59-6f22-4527-867a-8d49f4c2e42e",
						"exec": [
							"//store test as function.",
							"//Later we could eval this function to execute all tests",
							"",
							"var commonTests = () => {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    pm.test(\"Content-Type is present\", function () {",
							"     pm.response.to.have.header(\"Content-Type\");",
							"    });",
							"    pm.test(\"Response time is less than 500ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(500);",
							"    });",
							"    ",
							"};",
							"",
							"//store test as variable",
							"pm.environment.set(\"commonTests\", commonTests.toString());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "GetUser1",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 12 Jan 2020 20:52:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"a9-UwHd951rLzNqzqItB0vTQAVbJ+k\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "4196"
						},
						{
							"key": "Expect-CT",
							"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "554203a52f29cdd7-CDG"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"id\": 1,\n        \"email\": \"george.bluth@reqres.in\",\n        \"first_name\": \"George\",\n        \"last_name\": \"Bluth\",\n        \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg\"\n    }\n}"
				},
				{
					"name": "GetUserError",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 12 Jan 2020 20:52:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"a9-UwHd951rLzNqzqItB0vTQAVbJ+k\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "4196"
						},
						{
							"key": "Expect-CT",
							"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "554203a52f29cdd7-CDG"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\":\"Not found\"\n}"
				}
			]
		},
		{
			"name": "Reuse Test Cases",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "625c9af1-72d0-46ed-80bf-80aa41ade6d6",
						"exec": [
							"//Get variable and evaluate it",
							"",
							"eval(pm.environment.get(\"commonTests\"))();",
							"",
							"const jsonData = pm.response.json();",
							"",
							"//Also we add another test",
							"pm.test(\"Check value\", function () {",
							"    pm.expect(jsonData.data.email).to.eql(\"janet.weaver@reqres.in\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Arrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80960317-bec5-4a12-b4be-5736c0abb971",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"//Check text is present in response",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"sand dollar\");",
							"});",
							"",
							"//Check number of elements",
							"pm.test(\"Hola\", function () {",
							"    pm.expect(jsonData.data.length).to.eql(6);",
							"    ",
							"    //Error message gives us more info",
							"    pm.expect(jsonData.data).to.have.lengthOf(6);",
							"",
							"});",
							"",
							"//Find elements in response",
							"//Use js functions",
							"let blue = jsonData.data.find(element => element.name == \"blue iris\");",
							"",
							"console.log(blue);",
							"",
							"//check data of the found element",
							"pm.test(\"Blue Iris found\", function () {",
							"     pm.expect(blue).not.to.be.an('undefined');",
							"     pm.expect(blue.color).eql('#5A5B9F');",
							"     pm.expect(blue.year).to.be.a('number');",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/unknown?page=2",
					"host": [
						"{{url}}"
					],
					"path": [
						"unknown"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RandomData + PreScipt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "44c0538b-e50a-4ae2-a2e8-2ff911c9136b",
						"exec": [
							"//Store datetime to check inserted data is correct",
							"const dateNow = new Date();",
							"let yesterday = dateNow.setDate(dateNow.getDate() - 1);",
							"pm.variables.set('yesterday', dateNow.toISOString());",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7aa165c6-623a-4315-a9cc-007aabfbc728",
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"let yesterday = new Date(pm.variables.get(\"yesterday\")); ",
							"",
							"pm.test(\"Status code is OK\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
							"});",
							"",
							"//check data response is not empty",
							"pm.test(\"Check data is not empty\", function () {",
							"    pm.expect(jsonData.name).exist;",
							"    pm.expect(jsonData.job).exist;",
							"    pm.expect(parseInt(jsonData.id)).to.be.above(0);",
							"",
							"});",
							"",
							"//Check date is",
							"pm.test(\"Check dates\", function () {",
							"    pm.expect(new Date(jsonData.createdAt)).to.be.above(yesterday);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "authority",
						"value": "reqres.in"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "origin",
						"value": "https://reqres.in"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"
					},
					{
						"key": "dnt",
						"value": "1"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-origin"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "referer",
						"value": "https://reqres.in/"
					},
					{
						"key": "accept-encoding",
						"value": "gzip, deflate, br"
					},
					{
						"key": "accept-language",
						"value": "es-ES,es;q=0.9,en;q=0.8"
					},
					{
						"key": "cookie",
						"value": "__cfduid=dc0a1805adceba5e3bd14f4332eee0a001553890779"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"{{$randomFirstName}}\",\n\t\"job\": \"{{$randomJobType}}\"\n}"
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}